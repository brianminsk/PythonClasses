PY220 lesson02 activity: debugging recursive.py
Brian Minsk

The recursion's termination condition (n == 2) will be true only when the
initial argument is a power of 2 so, if the initial argument is not a power of
2, n will never be equal to 2 and the function will continue to recurse.

I put a conditional breakpoint at the first line in my_fun for when n <= 2
because n only decreases in each subsequent call to my_fun and if n passes 2 it
will never fire the termination condition n == 2. When starting with n == 10
my_fun is called with 1.25 (which I inspect at the breakpoint) - it has passed
2 and will not get greater on subsequent calls so the termination condition is
never entered. I restart the script and force n to 8, which is a power of 2.
n at the breakpoint is equal to 2 so the termination condition fires, returns
True, and the recursion unwinds.

$ python -m pdb recursive.py 10
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(3)<module>()
-> """
(Pdb) b 9
Breakpoint 1 at c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py:9
(Pdb) condition 1 n <= 2
New condition set for breakpoint 1.
(Pdb) continue
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(9)my_fun()
-> if n == 2:
(Pdb) pp n
1.25
(Pdb) restart
Restarting recursive.py with arguments:
        recursive.py 10
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(3)<module>()
-> """
(Pdb) n
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(5)<module>()
-> import sys
(Pdb) n
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(8)<module>()
-> def my_fun(n):
(Pdb) n
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(14)<module>()
-> if __name__ == '__main__':
(Pdb) n
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(15)<module>()
-> n = int(sys.argv[1])
(Pdb) n
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(16)<module>()
-> print(my_fun(n))
(Pdb) !n = 8
(Pdb) continue
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(9)my_fun()
-> if n == 2:
(Pdb) pp n
2.0
(Pdb) n
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(10)my_fun()
-> return True
(Pdb) n
--Return--
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(10)my_fun()->True
-> return True
(Pdb) n
--Return--
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(11)my_fun()->True
-> return my_fun(n / 2)
(Pdb) n
--Return--
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(11)my_fun()->True
-> return my_fun(n / 2)
(Pdb) n
True
--Return--
> c:\users\brian\pythonclass\py220\sp_python220b_2019\students\brian_minsk\lesson02\activity\recursive.py(16)<module>()->None
-> print(my_fun(n))
(Pdb) n
--Return--
> <string>(1)<module>()->None